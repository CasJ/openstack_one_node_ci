#!/usr/bin/env groovy

def osa, common
String workspace_dir
String host_ip, elasticsearch_ip, elasticsearch_pkey

// Jenkins must provide these variables as parameters or the build 
// will fail:
//  - from_release
//  - to_release


// *******************************
stage 'Deployment'
// *******************************

echo 'Deploying an All In One OpenStack using OSA'
node('master') {
    
    // Load the external functions using master since the git command
    // might not be available at the agent yet
    fileLoader.withGit('https://github.com/CasJ/openstack_one_node_ci.git', 'master', null, '') {
        common = fileLoader.load('common.groovy');
        osa = fileLoader.load('osa_aio.functions.groovy');
    }
    
}

node('elasticsearch') {

    // Get the server information
    elasticsearch_ip = common.get_server_ip()
    elasticsearch_pkey = common.get_server_public_key()

}

node('agent-xl') {
    
    // Wait for cloud-init to finish
    common.wait_for_agent_setup()

    // Get the workspace directory in the agent
    workspace_dir = pwd()
    echo "The workspace directory is ${workspace_dir}"

    // Get the agent IP
    host_ip = common.get_server_ip()

    // Add the elasticsearch public key to the deployed onmetal host
    common.add_key_to_server(elasticsearch_pkey)

    // Deploy OpenStack
    osa.deploy_openstack(from_release)

    // Install latest version of Tempest in the host
    osa.configure_tempest()

}


// *******************************
stage 'Post-Deployment Validation'
// *******************************

echo 'Running tests to validate the OpenStack deployment'
node('agent-xl') {
   
    // Run the smoke tests
    osa.run_tempest_smoke_tests('before_upgrade', elasticsearch_ip)

    // Install and run the persistent resources creation
    osa.install_persistent_resources_tests()
    osa.run_persistent_resources_tests('create')
    osa.run_persistent_resources_tests('verify', 'before_upgrade')
    
}

// *******************************
stage 'Upgrade Testing Start'
// *******************************
echo 'Starting tests that will run continuosly thru upgrade'
node('agent-xl') {
    
    //Setup during upgrade test
    osa.install_during_upgrade_tests()
    
    // Setup API uptime tests
    osa.install_api_uptime_tests()

    //Start During Upgrade Test
    osa.start_during_test()
  
    // Start API uptime tests
    osa.start_api_uptime_tests()

}

// *******************************
stage 'Upgrade'
// *******************************

echo "Upgrading OpenStack from ${from_release} to ${to_release}"
node('agent-xl') {

    // Install latest version of Tempest in the host
    osa.rolling_upgrade(to_release)

}

// *******************************
stage 'Upgrade Testing Stop'
// *******************************
echo 'Starting tests that will run continuosly thru upgrade'
node('agent-xl') {

    //Stop During Upgrade Test
    osa.stop_during_test()  

    // Stop API uptime tests
    osa.stop_api_uptime_tests()  

}

// *******************************
stage 'Post-Upgrade Validation'
// *******************************

echo 'Validating the OpenStack deployment after the upgrade'
node('agent-xl') {
 
    // Run the tempest tests
    osa.run_tempest_smoke_tests('after_upgrade', elasticsearch_ip)

    // Run the persistent resources validation then clean them up
    osa.run_persistent_resources_tests('verify', 'after_upgrade')
    osa.run_persistent_resources_tests('cleanup')    

}

// *******************************
stage 'Reporting'
// *******************************

echo 'Parsing the test results and submitting them to ElasticSearch'
node('agent-xl'){
 
    // Pase persistent resource results
    osa.setup_parse_persistent_resources()
    osa.parse_persistent_resources_tests()

}

node('elasticsearch'){
  
    // Install/upgrade the parser in ElasticSearch 
    osa.install_parser()

    //Pull data from the system and places it on ES vm
    osa.aggregate_results(host_ip)

    //Push data to ES
    osa.parse_results()
    
}

// *******************************
stage 'Clean Up'
// *******************************

echo 'Deleting the OpenStack host'
node('agent-xl') {

    // There is actually nothing to be done here since Jenkins will take
    // care of deleting the VM. This stage is left in the pipeline just
    // for reference.
    println "The host ${host_ip} will be deleted by Jenkins in 5 minutes."

}
