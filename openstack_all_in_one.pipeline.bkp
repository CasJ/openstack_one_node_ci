#!/usr/bin/env groovy

def osa, common

// Jenkins must provide this variable as parameter or the build 
// will fail:
//  - release

// *******************************
stage 'Deployment'
// *******************************

echo 'Deploying OpenStack using OSA for single node'
node('master') {
    
    // Load the external functions using master since the git command
    // might not be available at the agent yet
    fileLoader.withGit('https://github.com/CasJ/openstack_one_node_ci.git', 'master', null, '') {
        common = fileLoader.load('common.groovy');
        osa = fileLoader.load('osa_aio.functions.groovy');
    }
    
}

node('agent-xl') {
    
    // Wait for cloud-init to finish
    common.wait_for_cloud_init()

    // Deploy OpenStack and Tempest
    osa.deploy_openstack_aio()
    sh '''
    git clone https://github.com/openstack/openstack-ansible  /home/ubuntu/openstack-ansible
    cd /home/ubuntu/openstack-ansible
    git checkout stable/mitaka
    export apply_security_hardening=false
    sudo scripts/bootstrap-ansible.sh
    sudo scripts/bootstrap-aio.sh
    sudo scripts/run-playbooks.sh
    cd playbooks/
    sudo openstack-ansible os-tempest-install.yml
    '''

}


stage 'Post-Deployment Validation'

def config

echo 'Running tests to validate the OpenStack deployment'
node('agent-xl') {
   
    // Install latest version of Tempest in the host
    sh '''
    git clone https://github.com/openstack/tempest.git /home/ubuntu/tempest
    cd /home/ubuntu/tempest/
    sudo pip install -r requirements.txt
    '''

    // Get a config file template with the basic static values of an OSA deployment
    sh '''
    cd /home/ubuntu/tempest/etc/
    wget https://raw.githubusercontent.com/CasJ/openstack_one_node_ci/master/tempest.conf
    '''    

    // Get the tempest config file generated by the OSA deployment
    sh '''
    container_name=$(sudo lxc-ls -f | grep aio1_utility_container- | awk '{print $1}')
    sudo cp /var/lib/lxc/$container_name/rootfs/opt/tempest_untagged/etc/tempest.conf /home/ubuntu/tempest/etc/tempest.conf.osa
    '''

    // Configure the dynamic values of tempest.conf based on the OSA deployment
    sh '''
    keys='admin_password image_ref image_ref_alt uri uri_v3 public_network_id'
    for key in $keys
    do
        a="${key} ="
        b=`cat /home/ubuntu/tempest/etc/tempest.conf.osa | grep "$a"`
        sed -ir "s|$a|$b|g" /home/ubuntu/tempest/etc/tempest.conf
    done
    '''

    // Run the tests and store the results in ~/subunit/before
    sh '''
    mkdir /home/ubuntu/subunit
    cd /home/ubuntu/tempest/
    testr init
    stream_id=`cat .testrepository/next-stream`
    ostestr --no-slowest --regex smoke
    cp .testrepository/$stream_id /home/ubuntu/subunit/before
    '''
    
}


def wait_for_cloud_init() {
    
    // Wait up to five minutes for cloud-init to finish installing packages
    timeout(5) {
        waitUntil {
            echo 'Waiting for cloud-init to finish'
            def cloud_init = readFile('/var/log/cloud-init-output.log')
            def matcher = cloud_init =~ 'Cloud-init .* finished'
            matcher ? true : false
        }
        echo 'Cloud-init completed'
    }

}

